buildscript {
	repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "$gdxSource:gdx-jnigen:$gdxVersion"
    }
}

apply plugin: "java"
apply plugin: 'maven-publish'

import org.gradle.internal.os.OperatingSystem;

ext {
	if(OperatingSystem.current().isWindows()) {
		antExec = 'ant.bat'
	}
	else {
		antExec = 'ant'
	}
}

eclipse.project {
    name = appName + "-native"
}

sourceCompatibility = 1.6
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

def pdSources = copySpec {
	from("../libpd/pure-data/src"){
		include "d_arithmetic.c", "d_array.c", "d_ctl.c",
				"d_dac.c", "d_delay.c", "d_fft.c",
				"d_fft_fftsg.c",
				"d_filter.c", "d_global.c", "d_math.c",
				"d_misc.c", "d_osc.c", "d_resample.c",
				"d_soundfile.c", "d_ugen.c",
				"g_all_guis.c", "g_array.c", "g_bang.c",
				"g_canvas.c", "g_clone.c", "g_editor.c",
				"g_graph.c", "g_guiconnect.c", "g_hdial.c",
				"g_hslider.c", "g_io.c", "g_mycanvas.c",
				"g_numbox.c", "g_readwrite.c",
				"g_rtext.c", "g_scalar.c", "g_template.c",
				"g_text.c", "g_toggle.c", "g_traversal.c",
				"g_vdial.c", "g_vslider.c", "g_vumeter.c",
				"m_atom.c", "m_binbuf.c", "m_class.c",
				"m_conf.c", "m_glob.c", "m_memory.c",
				"m_obj.c", "m_pd.c", "m_sched.c",
				"s_audio.c", "s_audio_dummy.c", "s_file.c", 
				"s_inter.c",
				"s_loader.c", "s_main.c", "s_path.c",
				"s_print.c", "s_utf8.c", "x_acoustics.c",
				"x_arithmetic.c", "x_array.c", "x_connective.c",
				"x_gui.c", "x_interface.c", "x_list.c",
				"x_midi.c", "x_misc.c", "x_net.c",
				"x_scalar.c", "x_text.c", "x_time.c",
				
				"x_vexp.c", 
				"x_vexp_if.c", 
				"x_vexp_fun.c"
	}
	into "pd-sources"
}


def pdExtraSources = copySpec {

	from("../libpd/pure-data/extra"){
		include "bob~/bob~.c", 
				"bonk~/bonk~.c",
				"choice/choice.c",
				"fiddle~/fiddle~.c", "loop~/loop~.c",
				"lrshift~/lrshift~.c", "pique/pique.c",
				"sigmund~/sigmund~.c", "stdout/stdout.c" 
	}
	into "pd-extra-sources"
}

def extraSources = copySpec {

	from("extra"){
		include "**/*.c"
	}
	into "extra-sources"
}

def libpdSources = copySpec {
	from("../libpd/libpd_wrapper"){
		include "util/ringbuffer.c",
				"util/z_print_util.c",
				"util/z_queued.c",
				
				"s_libpdmidi.c", 
				"x_libpdreceive.c",
				"z_hooks.c", 
				"z_libpd.c"
	}
	into "libpd-sources"
}

def libpdJniSources = copySpec {
	from("../libpd/jni"){
		include "z_jni_plain.c"
	}
	into "libpdbinding-sources"
}

def libpdOpenSLSources = copySpec {
	from("../libpd/jni"){
		include "z_jni_opensl.c",
				"opensl_stream/opensl_stream.c"
	}
	into "libpdopensl-sources"
}

def pdoggSources = copySpec {
	from("../libpd/pdogg-0.25.1"){
		include "oggamp~.c", "oggcast~.c", "oggread~.c", "oggwrite~.c", "pdogg.c"
	}
	into "pdogg-sources"
}

def liboggSources = copySpec {
	from("../libpd/libogg-1.3.2/src"){
		include "bitwise.c", "framing.c"
	}
	into "libogg-sources"
}

def libvorbisSources = copySpec {
	from("../libpd/libvorbis-1.3.5/lib"){
		include "mdct.c", "smallft.c", "block.c", "envelope.c", "window.c", "lsp.c",
			"lpc.c", "analysis.c", "synthesis.c", "psy.c", "info.c",
			"floor1.c", "floor0.c",
			"res0.c", "mapping0.c", "registry.c", "codebook.c", "sharedbook.c",
			"lookup.c", "bitrate.c",
			"vorbisfile.c", "vorbisenc.c"
	}
	into "libvorbis-sources"
}

def ggeeSources = copySpec {
	from("../libpd/ggee-0.26"){
		include "control/constant.c", "control/rl.c", "control/serial_ms.c", "control/sl.c", "control/getdir.c", 
		"control/serial_mt.c", "control/stripdir.c", "control/inv.c", "control/serial_bird.c", "control/shell.c", "control/unserialize.c", 
		"control/qread.c", "control/serialize.c", "control/sinh.c", "control/unwonk.c", "experimental/fofsynth~.c", "experimental/tabwrite4~.c", 
		"experimental/pvocfreq.c", "filters/bandpass.c", "filters/highpass.c", "filters/hlshelf.c", "filters/lowshelf.c", "filters/notch.c", 
		"filters/equalizer.c", "filters/highshelf.c", "filters/lowpass.c", "filters/moog~.c", "gui/button.c", "gui/fatom.c", "gui/image.c", 
		"gui/sliderh.c", "gui/ticker.c", "gui/envgen.c", "gui/gcanvas.c", "gui/slider.c", "gui/state.c", "signal/atan2~.c", 
		"signal/mixer~.c", "signal/sfwrite~.c", "signal/streamin~.c",
		"ggee.c"
	}
	into "ggee-sources"
}

def libsndfileSources = copySpec {
	from("../libsndfile/src"){
		include "common.c", "file_io.c", "command.c", "pcm.c", 
			"ulaw.c", "alaw.c", "float32.c", "double64.c", "ima_adpcm.c", "ms_adpcm.c", 
			"gsm610.c", "dwvw.c", "vox_adpcm.c", "interleave.c", "strings.c", "dither.c", 
			"cart.c", "broadcast.c", "audio_detect.c", "ima_oki_adpcm.c", 
			"alac.c", "chunk.c", "ogg.c", "chanmap.c", "windows.c", "id3.c", 
			"sndfile.c", "aiff.c", "au.c", "avr.c", "caf.c", "dwd.c", "flac.c", "g72x.c", "htk.c", "ircam.c", 
			"macos.c", "mat4.c", "mat5.c", "nist.c", "paf.c", "pvf.c", "raw.c", "rx2.c", "sd2.c", 
			"sds.c", "svx.c", "txw.c", "voc.c", "wve.c", "w64.c", "wavlike.c", "wav.c", "xi.c", "mpc2k.c", "rf64.c", 
			"ogg_vorbis.c", "ogg_speex.c", "ogg_pcm.c", "ogg_opus.c", 
			"GSM610/add.c", "GSM610/code.c", "GSM610/decode.c", "GSM610/gsm_create.c", 
			"GSM610/gsm_decode.c", "GSM610/gsm_destroy.c", "GSM610/gsm_encode.c", 
			"GSM610/gsm_option.c", "GSM610/long_term.c", "GSM610/lpc.c", "GSM610/preprocess.c", 
			"GSM610/rpe.c", "GSM610/short_term.c", "GSM610/table.c", 
			"G72x/g721.c", "G72x/g723_16.c", "G72x/g723_24.c", "G72x/g723_40.c", "G72x/g72x.c", 
			"ALAC/ALACBitUtilities.c", "ALAC/ag_dec.c", 
			"ALAC/ag_enc.c", "ALAC/dp_dec.c", "ALAC/dp_enc.c", "ALAC/matrix_dec.c", 
			"ALAC/matrix_enc.c", "ALAC/alac_decoder.c", "ALAC/alac_encoder.c"
	}
	into "libsndfile-sources"
}

def threadlibSources = copySpec {
	from("../pd-macambira/externals/grh/threadlib/src"){
		include "callbacks.c", "detach.c", "fifo.c", "join.c", "sleep.c", "threadlib.c"
	}
	into "threadlib-sources"
}

def sndfilerSources = copySpec {
	from("../pd-macambira/externals/tb/sndfiler/src"){
		include "file_input.c", "sndfiler.c"
	}
	into "sndfiler-sources"
}

task generateJniClasses(type:Exec) {
    def classpath = "$projectDir/../libpd/java"
    commandLine "javac", "-classpath", classpath, "$projectDir/../libpd/java/org/puredata/core/PdBase.java"
}

task generateJniHeaders(type:Exec) {
    def classpath = "$projectDir/../libpd/java"
    def nativeIncludes = "src/native/include"                     
    commandLine "javah", "-o", "$projectDir/../libpd/jni/z_jni.h", "-classpath", classpath, "org.puredata.core.PdBase"

    dependsOn generateJniClasses
}

import org.apache.tools.ant.DirectoryScanner

task importSources(type: Copy, dependsOn: [generateJniHeaders]) {

	// Workaround to copy folder with tilde (~) as suggested here : https://issues.gradle.org/browse/GRADLE-1883
	doFirst {
      DirectoryScanner.defaultExcludes.each { DirectoryScanner.removeDefaultExclude it }
   	}

	with pdSources
	with pdExtraSources
	with extraSources
	with libpdSources
	with libpdJniSources
	with libpdOpenSLSources
	with pdoggSources
	with liboggSources
	with libvorbisSources
	with ggeeSources
	with libsndfileSources
	with threadlibSources
	with sndfilerSources
	into "jni/pd"
	
	doLast {
      DirectoryScanner.resetDefaultExcludes()
   	}
}

import com.badlogic.gdx.jnigen.*

task generateBuildScripts(dependsOn: [importSources]){

	doLast{
	
		def headerDirs = [
				"../../libpd/pure-data/src", 
				"../../libpd/pure-data/extra",
				"extra",
				"../../libpd/libpd_wrapper",
				"../../libpd/jni",
				"../../libpd/libpd_wrapper/util",
				"../../libpd/libogg-1.3.2/include/ogg",
				"../../libpd/libvorbis-1.3.5/include/vorbis",
				"../../libpd/libvorbis-1.3.5/lib",
				"../../libpd/libvorbis-1.3.5/lib/modes",
				"../../libpd/libvorbis-1.3.5/lib/books/coupled",
				"../../libpd/libvorbis-1.3.5/lib/books/floor",
				"../../libpd/libvorbis-1.3.5/lib/books/uncoupled",
				"../../libpd/ggee-0.26/filters",
				"../../libpd/ggee-0.26/gui",
				"../../libpd/ggee-0.26/signal",
				"../../libsndfile/src",
				"../../libsndfile/src/ALAC",
				"../../libsndfile/src/G72x",
				"../../libsndfile/src/GSM610",
				"../../pd-macambira/externals/grh/threadlib/src",
				"../../pd-macambira/externals/tb/sndfiler/src"]
		
	
		def linux64 = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Linux, true);
		def linux32 = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Linux, false);
		def windows64 = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Windows, true);
		def windows32 = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Windows, false);
		def macosx64 = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.MacOsX, true);
		def macosx32 = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.MacOsX, false);

		def android = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Android, false);
	
		// All platform flags
		[linux64, linux32, windows64, windows32, macosx64, macosx32, android].each {
			it.cFlags += " -DLIBPD_EXTRA"
		}
	
		// Common flags (all platforms except android)
		[linux64, linux32, windows64, windows32, macosx64, macosx32].each {
			it.cFlags += " -DPD -DHAVE_UNISTD_H -DUSEAPI_DUMMY -O3 -DLIBPD_SETLOCALE";
			it.libraries += " -lm -lpthread";
			it.headerDirs += headerDirs
			it.cExcludes += ["**/libpdopensl-sources/**/*.*"]
		}

		[linux64, linux32].each {
			it.cFlags += " -DHAVE_LIBDL -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast -fPIC";
			it.libraries += " -shared -ldl -Wl,-Bsymbolic";
		}
		
		[macosx64].each {
			it.cFlags += " -DHAVE_LIBDL -arch x86_64 -g"
			it.libraries += " -framework JavaVM -arch x86_64 -dynamiclib -ldl"
			it.headerDirs += ["/System/Library/Frameworks/JavaVM.framework/Headers"]
		}
		
		[macosx32].each {
			it.cFlags += " -DHAVE_LIBDL -arch i386 -g"
			it.libraries += " -framework JavaVM -arch i386 -dynamiclib -ldl"
			it.headerDirs += ["/System/Library/Frameworks/JavaVM.framework/Headers"]
		}
		
		[windows64, windows32].each {
			it.cFlags += " -DWINVER=0x502 -DWIN32 -D_WIN32 -DPD_INTERNAL";
			it.libraries += " -shared -Wl,--export-all-symbols -lws2_32 -lkernel32" // MINGW
			it.libraries += " -Wl,--kill-at" // linker
		}
		
		[android].each {
			it.cFlags += " -DPD -DHAVE_UNISTD_H -DHAVE_LIBDL -DUSEAPI_DUMMY -w"
			it.cFlags += " -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast"
			it.libraries += " -ldl";
			it.headerDirs += headerDirs
			it.headerDirs += ["../../libpd/jni/opensl_stream"]
			it.linkerFlags += " -lOpenSLES -llog"
			it.cExcludes += ["**/libpdbinding-sources/**/*.*", "**/target/**/*.*"]
		}
		
		// TODO IOS
		

		BuildConfig config = new BuildConfig("gdx-pd", "target", "libs", "$projectDir/jni");
		
		new AntScriptGenerator().generate(config, linux64, linux32, windows64, windows32, macosx64, macosx32, android);
		
		copy{
			from(".")
			into "jni"
			include "Application.mk"
		}
	}

}


// TODO use gradle ant (ant.echo)

task buildLinux64(type:Exec, dependsOn: generateBuildScripts){
	executable antExec
	args = ['-f', "$projectDir/jni/build-linux64.xml", '-v', '-Dhas-compiler=true', 'clean', 'postcompile']
}

task buildLinux32(type:Exec, dependsOn: generateBuildScripts){
	executable antExec
	args = ['-f', "$projectDir/jni/build-linux32.xml", '-v', '-Dhas-compiler=true', 'clean', 'postcompile']
}

task buildWindows64(type:Exec, dependsOn: generateBuildScripts){
	executable antExec
	args = ['-f', "$projectDir/jni/build-windows64.xml", '-v', '-Dhas-compiler=true', 'clean', 'postcompile']
}

task buildWindows32(type:Exec, dependsOn: generateBuildScripts){
	executable antExec
	args = ['-f', "$projectDir/jni/build-windows32.xml", '-v', '-Dhas-compiler=true', 'clean', 'postcompile']
}

task buildMacOSX64(type:Exec, dependsOn: generateBuildScripts){
	executable antExec
	args = ['-f', "$projectDir/jni/build-macosx64.xml", '-v', '-Dhas-compiler=true', 'clean', 'postcompile']
}

task buildMacOSX32(type:Exec, dependsOn: generateBuildScripts){
	executable antExec
	args = ['-f', "$projectDir/jni/build-macosx32.xml", '-v', '-Dhas-compiler=true', 'clean', 'postcompile']
}

task buildAndroid(type:Exec, dependsOn: generateBuildScripts){
	executable antExec
	args = ['-f', "$projectDir/jni/build-android32.xml", '-v', '-Dhas-compiler=true', 'clean', 'postcompile']
}

task buildNativeMac(dependsOn: [buildMacOSX64, buildMacOSX32]){
	
}

task buildNative(dependsOn: [buildLinux64, buildLinux32, buildWindows64, buildWindows32, buildAndroid]){
	
}

task desktopJar(type: Jar) {
    baseName "desktop-native"
    from("libs/linux64")
    from("libs/linux32")
    from("libs/macosx64")
    from("libs/macosx32")
    from("libs/windows64")
    from("libs/windows32")
    from("../libpd/libs/mingw32"){
    	rename("libwinpthread-1.dll", "pthread.dll")
    }
    from("../libpd/libs/mingw64"){
    	rename("libwinpthread-1.dll", "pthread64.dll")
    }
}

task androidArmJar(type: Jar) {
    from("libs/armeabi")
}
task androidArm7Jar(type: Jar) {
    from("libs/armeabi-v7a")
}
task androidArm8Jar(type: Jar) {
    from("libs/arm64-v8a")
}
task android32Jar(type: Jar) {
    from("libs/x86")
}
task android64Jar(type: Jar) {
    from("libs/x86_64")
}

publishing {
    publications {
        natives(MavenPublication) {
            groupId groupName
            artifactId "$appName"
            artifact desktopJar {
                classifier "desktop"
            }
            artifact("libs/armeabi/libgdx-pd.so") {
                classifier "armeabi"
            }
            artifact("libs/armeabi-v7a/libgdx-pd.so") {
                classifier "armeabi-v7a"
            }
            artifact("libs/arm64-v8a/libgdx-pd.so") {
                classifier "arm64-v8a"
            }
            artifact("libs/x86/libgdx-pd.so") {
                classifier "x86"
            }
            artifact("libs/x86_64/libgdx-pd.so") {
                classifier "x86_64"
            }
        }
    }
}
